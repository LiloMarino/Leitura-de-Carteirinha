# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk
from tkcalendar import DateEntry
import tkinter as tk
import sys

ASSETS_PATH = Path(__file__).parent / "assets" / "frame0"
ROOT_PATH = Path(__file__).parent.parent.parent
if str(ROOT_PATH) not in sys.path:
    sys.path.append(str(ROOT_PATH))
from Telas.defs import *


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def criar_tela_exportar(frame: ttk.Frame, imagens: dict[str, dict]):
    def carregar_imagens():
        imagens["image_1"] = PhotoImage(file=relative_to_assets("image_1.png"))
        imagens["image_2"] = PhotoImage(file=relative_to_assets("image_2.png"))
        imagens["button_1"] = PhotoImage(file=relative_to_assets("button_1.png"))
        imagens["button_2"] = PhotoImage(file=relative_to_assets("button_2.png"))
        imagens["button_3"] = PhotoImage(file=relative_to_assets("button_3.png"))

    def criar_canvas():
        canvas = Canvas(
            frame,
            bg="#FFFFFF",
            height=768,
            width=1365,
            bd=0,
            highlightthickness=0,
            relief="ridge",
        )
        canvas.place(x=0, y=0)

        canvas.create_image(682.0, 384.0, image=imagens["image_1"])
        canvas.create_image(1180.0, 448.0, image=imagens["image_2"])
        canvas.create_text(
            36.0,
            37.0,
            anchor="nw",
            text="Inicio:",
            fill="#FFFFFF",
            font=(FONTE_TELAS, 48 * -1),
        )
        canvas.create_text(
            515.0,
            37.0,
            anchor="nw",
            text="Fim:",
            fill="#FFFFFF",
            font=(FONTE_TELAS, 48 * -1),
        )
        
    def criar_botao(x, y, image, command):
        button = Button(
            frame,
            image=image,
            borderwidth=0,
            highlightthickness=0,
            command=command,
            relief="flat",
        )
        button.place(x=x, y=y, width=image.width(), height=image.height())
        
    def criar_tabela():
        def criar_frame_tabela():
            frame_tabela = ttk.Frame(frame)
            frame_tabela.place(x=22.0, y=182.0, width=972.0, height=537.0, anchor="nw")
            frame_tabela.columnconfigure(0, weight=1)
            frame_tabela.rowconfigure(0, weight=1)
            return frame_tabela

        def criar_scrollbar(frame_tabela, tabela):
            scrollbar = ttk.Scrollbar(
                frame_tabela, orient=tk.VERTICAL, command=tabela.yview
            )
            scrollbar.grid(row=0, column=1, sticky="ns")
            tabela.configure(yscrollcommand=scrollbar.set)

        frame_tabela = criar_frame_tabela()
        tabela = ttk.Treeview(
            frame_tabela, columns=("data"), show="headings"
        )
        criar_scrollbar(frame_tabela, tabela)
        tabela.heading("data", text="Data da RG")
        tabela.grid(row=0, column=0, sticky="nsew")
        return tabela

    def criar_input_data(x, y):
        date_entry = DateEntry(master=frame, font=(FONTE_TELAS, 20))
        date_entry.place(x=x, y=y, width=200)
        return date_entry

    # Criação e configuração dos elementos da tela
    carregar_imagens()
    criar_canvas()
    date_entry_inicio = criar_input_data(153.0, 44.0)
    date_entry_fim = criar_input_data(615.0, 44.0)
    tabela = criar_tabela()
    criar_botao(1072.0, 31.0, imagens["button_1"], lambda: print("Selecionar"))
    criar_botao(1027.0, 182.0, imagens["button_2"], lambda: print("Local"))
    criar_botao(1076.0, 642.0, imagens["button_3"], lambda: print("Exportar"))
