# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk
import sys


ASSETS_PATH = Path(__file__).parent / "assets" / "frame0"
ROOT_PATH = Path(__file__).parent.parent.parent
if str(ROOT_PATH) not in sys.path:
    sys.path.append(str(ROOT_PATH))
from Telas.defs import *
from cruds.Curso import consultar_cursos


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def criar_tela_cadastro_usuarios(frame: ttk.Frame, imagens: dict[str, dict]):
    # Imagens
    imagens["image_1"] = PhotoImage(file=relative_to_assets("image_1.png"))
    imagens["entry_1"] = PhotoImage(file=relative_to_assets("entry_1.png"))
    imagens["entry_2"] = PhotoImage(file=relative_to_assets("entry_2.png"))
    imagens["entry_3"] = PhotoImage(file=relative_to_assets("entry_3.png"))
    imagens["image_2"] = PhotoImage(file=relative_to_assets("image_2.png"))
    imagens["image_3"] = PhotoImage(file=relative_to_assets("image_3.png"))
    imagens["button_1"] = PhotoImage(file=relative_to_assets("button_1.png"))
    imagens["button_2"] = PhotoImage(file=relative_to_assets("button_2.png"))

    # Canvas
    canvas = Canvas(
        frame,
        bg="#FFFFFF",
        height=768,
        width=1365,
        bd=0,
        highlightthickness=0,
        relief="ridge",
    )
    canvas.place(x=0, y=0)

    # Adiciona imagens, textos, retângulos ao canvas
    canvas.create_image(682.0, 384.0, image=imagens["image_1"])

    canvas.create_text(
        514.0,
        42.0,
        anchor="nw",
        text="CADASTRO DE USUÁRIOS",
        fill="#FFFFFF",
        font=(FONTE_TELAS, 48 * -1),
    )

    canvas.create_text(
        67.0,
        172.0,
        anchor="nw",
        text="NOME:",
        fill="#FFFFFF",
        font=(FONTE_TELAS, 48 * -1),
    )
    canvas.create_text(
        67.0,
        293.0,
        anchor="nw",
        text="N° DA CARTEIRINHA:",
        fill="#FFFFFF",
        font=(FONTE_TELAS, 48 * -1),
    )
    canvas.create_text(
        67.0,
        426.0,
        anchor="nw",
        text="CURSO",
        fill="#FFFFFF",
        font=(FONTE_TELAS, 48 * -1),
    )
    canvas.create_text(
        67.0,
        550.0,
        anchor="nw",
        text="EMAIL:",
        fill="#FFFFFF",
        font=(FONTE_TELAS, 48 * -1),
    )

    canvas.create_image(112.0, 54.0, image=imagens["image_2"])
    canvas.create_image(1253.0, 54.0, image=imagens["image_3"])

    # Entrada de texto
    entry_1 = Text(
        frame,
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=(FONTE_INPUT, 25),
    )
    entry_1.place(x=204.0, y=179.0, width=647.0, height=43.0)

    entry_2 = Text(
        frame,
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=(FONTE_INPUT, 25),
    )
    entry_2.place(x=374.0, y=300.0, width=372.0, height=43.0)

    entry_3 = Text(
        frame,
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=(FONTE_INPUT, 25),
    )
    entry_3.place(x=214.0, y=557.0, width=647.0, height=43.0)

    _cria_menu_cursos(frame)
    
    # Botões
    button_1 = Button(
        frame,
        image=imagens["button_1"],
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("Voltar"),
        relief="flat",
    )
    button_1.place(x=33.0, y=681.0, width=143.0, height=47.0)

    button_2 = Button(
        frame,
        image=imagens["button_2"],
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("Cadastrar"),
        relief="flat",
    )
    button_2.place(x=1012.0, y=644.0, width=303.0, height=84.0)


def _cria_menu_cursos(frame):
    # Menu de seleção
    cursos_dict = {}
    
    # Função a ser chamada quando o menu for acionado
    def atualizar_menu_cursos(event=None):
        # Atualizar os valores do Combobox
        nonlocal cursos_dict
        cursos = consultar_cursos()
        menu_cursos["values"] = [curso[1] for curso in cursos]
        # Criar um dicionário para mapear nomes de cursos para IDs
        cursos_dict = {curso[1]: curso[0] for curso in cursos}
    
    # Função para obter o id do curso selecionado
    def obter_id_curso_selecionado(event=None):
        curso_selecionado = menu_cursos.get()
        id_curso_selecionado = cursos_dict.get(curso_selecionado)
        print(id_curso_selecionado)
             
    menu_cursos = ttk.Combobox(
        frame,
        font=(FONTE_INPUT, 25, "bold"),
        state="readonly",
        postcommand=atualizar_menu_cursos,
        width=21,
    )
    menu_cursos.place(x=199, y=430)
    menu_cursos.option_add("*TCombobox*Listbox*Font", (FONTE_INPUT, 16))
    menu_cursos.bind("<<ComboboxSelected>>", obter_id_curso_selecionado)
