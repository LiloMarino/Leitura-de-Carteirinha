# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from datetime import date
from pathlib import Path
from tkinter import Canvas, Button, PhotoImage, messagebox, ttk
from tkcalendar import DateEntry
import tkinter as tk

from Telas.defs import *
from cruds.Reuniao import consultar_reunioes
from tab_functions import abrir_aba_editar_rg


ASSETS_PATH = Path(__file__).parent / "assets" / "frame0"



def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def criar_tela_buscar_rg(
    frame: ttk.Frame,
    imagens: dict[str, dict],
    notebook: ttk.Notebook,
    imagens_dict: dict[str, dict],
):
    def criar_imagens():
        imagens["image_1"] = PhotoImage(file=relative_to_assets("image_1.png"))
        imagens["image_2"] = PhotoImage(file=relative_to_assets("image_2.png"))
        imagens["button_2"] = PhotoImage(file=relative_to_assets("button_2.png"))

    def criar_canvas():
        canvas = Canvas(
            frame,
            bg="#FFFFFF",
            height=768,
            width=1365,
            bd=0,
            highlightthickness=0,
            relief="ridge",
        )
        canvas.place(x=0, y=0)

        canvas.create_image(682.0, 384.0, image=imagens["image_1"])
        canvas.create_image(682.0, 520.0, image=imagens["image_2"])
        canvas.create_text(
            80.0,
            60.0,
            anchor="nw",
            text="Data:",
            fill="#FFFFFF",
            font=(FONTE_TELAS, 48 * -1),
        )

    def criar_input_data():
        date_entry = DateEntry(master=frame, font=(FONTE_TELAS, 20))
        date_entry.place(x=180.0, y=70.0, width=200)
        return date_entry

    def criar_botao_buscar(date_entry):
        button_buscar = Button(
            frame,
            image=imagens["button_2"],
            borderwidth=0,
            highlightthickness=0,
            command=lambda: atualizar_tabela(date_entry.get_date()),
            relief="flat",
        )
        button_buscar.place(x=610.0, y=58.0, width=164.0, height=69.0)

    def criar_botao_editar():
        button_editar = Button(
            master=frame,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: abrir_aba_editar_rg(notebook, imagens_dict, tabela.focus()),
            relief="flat",
            text="Editar Reunião",
            font=(FONTE_TELAS, 40),
            background="#FFD708",
            activebackground="#FFD708",
        )
        button_editar.place(x=1076.0, y=551.0, width=268.0, height=68.0)

    def criar_tabela():
        def criar_frame_tabela():
            frame_tabela = ttk.Frame(frame)
            frame_tabela.place(x=70.0, y=190.0, width=950.0, height=530.0, anchor="nw")
            frame_tabela.columnconfigure(0, weight=1)
            frame_tabela.rowconfigure(0, weight=1)
            return frame_tabela

        def criar_scrollbar(frame_tabela, tabela):
            scrollbar = ttk.Scrollbar(
                frame_tabela, orient=tk.VERTICAL, command=tabela.yview
            )
            scrollbar.grid(row=0, column=1, sticky="ns")
            tabela.configure(yscrollcommand=scrollbar.set)

        frame_tabela = criar_frame_tabela()
        tabela = ttk.Treeview(
            frame_tabela, columns=("data", "n_presencas"), show="headings"
        )
        criar_scrollbar(frame_tabela, tabela)
        tabela.heading("data", text="Data")
        tabela.heading("n_presencas", text="Nº Presenças")
        tabela.grid(row=0, column=0, sticky="nsew")
        return tabela

    def atualizar_tabela(data: date = None):
        tabela.delete(*tabela.get_children())
        reunioes = consultar_reunioes(data)
        for id, data_reuniao, n_presencas in reunioes:
            data_reuniao: date
            tabela.insert(
                "",
                tk.END,
                iid=id,
                values=(data_reuniao.strftime("%d/%m/%Y"), n_presencas),
            )

    def obter_iid_selecionado(event):
        iid_selecionado = tabela.focus()
        print("IID do item selecionado:", iid_selecionado)

    # Criação e configuração dos elementos da tela
    criar_imagens()
    criar_canvas()
    date_entry = criar_input_data()
    criar_botao_buscar(date_entry)
    criar_botao_editar()
    tabela = criar_tabela()

    # Configuração e interação com a tabela
    frame.bind("<F5>", lambda event: atualizar_tabela())
    tabela.bind("<<TreeviewSelect>>", obter_iid_selecionado)
