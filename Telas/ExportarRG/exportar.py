# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from datetime import date
from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, filedialog, ttk
from tkcalendar import DateEntry
import tkinter as tk


from cruds.Reuniao import buscar_reuniao
from excel_functions import exportar_presencas

ASSETS_PATH = Path(__file__).parent / "assets" / "frame0"

from Telas.defs import *


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def criar_tela_exportar(frame: ttk.Frame, imagens: dict[str, dict]):
    def carregar_imagens():
        imagens["image_1"] = PhotoImage(file=relative_to_assets("image_1.png"))
        imagens["image_2"] = PhotoImage(file=relative_to_assets("image_2.png"))
        imagens["button_1"] = PhotoImage(file=relative_to_assets("button_1.png"))
        imagens["button_2"] = PhotoImage(file=relative_to_assets("button_2.png"))
        imagens["button_3"] = PhotoImage(file=relative_to_assets("button_3.png"))

    def criar_canvas():
        canvas = Canvas(
            frame,
            bg="#FFFFFF",
            height=768,
            width=1365,
            bd=0,
            highlightthickness=0,
            relief="ridge",
        )
        canvas.place(x=0, y=0)

        canvas.create_image(682.0, 384.0, image=imagens["image_1"])
        canvas.create_image(1180.0, 448.0, image=imagens["image_2"])
        canvas.create_text(
            36.0,
            37.0,
            anchor="nw",
            text="Inicio:",
            fill="#FFFFFF",
            font=(FONTE_TELAS, 48 * -1),
        )
        canvas.create_text(
            515.0,
            37.0,
            anchor="nw",
            text="Fim:",
            fill="#FFFFFF",
            font=(FONTE_TELAS, 48 * -1),
        )

    def criar_botao(x, y, image, command):
        button = Button(
            frame,
            image=image,
            borderwidth=0,
            highlightthickness=0,
            command=command,
            relief="flat",
        )
        button.place(x=x, y=y, width=image.width(), height=image.height())

    def criar_tabela():
        def criar_frame_tabela():
            frame_tabela = ttk.Frame(frame)
            frame_tabela.place(x=22.0, y=182.0, width=972.0, height=537.0, anchor="nw")
            frame_tabela.columnconfigure(0, weight=1)
            frame_tabela.rowconfigure(0, weight=1)
            return frame_tabela

        def criar_scrollbar(frame_tabela, tabela):
            scrollbar = ttk.Scrollbar(
                frame_tabela, orient=tk.VERTICAL, command=tabela.yview
            )
            scrollbar.grid(row=0, column=1, sticky="ns")
            tabela.configure(yscrollcommand=scrollbar.set)

        frame_tabela = criar_frame_tabela()
        tabela = ttk.Treeview(frame_tabela, columns=("data"), show="headings")
        criar_scrollbar(frame_tabela, tabela)
        tabela.heading("data", text="Data da RG")
        tabela.grid(row=0, column=0, sticky="nsew")
        return tabela

    def criar_input_data(x, y):
        date_entry = DateEntry(master=frame, font=(FONTE_TELAS, 20))
        date_entry.place(x=x, y=y, width=200)
        return date_entry

    def carregar_dados_tabela(data_inicial: date, data_final: date):
        tabela.delete(*tabela.get_children())
        reunioes = buscar_reuniao(data_inicial, data_final)
        for id, data_reuniao in reunioes:
            data_reuniao: date
            tabela.insert(
                "",
                tk.END,
                iid=id,
                values=(data_reuniao.strftime("%d/%m/%Y")),
            )

    def escolher_pasta(pasta_escolhida):
        pasta = filedialog.askdirectory()
        pasta_escolhida.set(pasta)

    # Criação e configuração dos elementos da tela
    local_de_salvamento = tk.StringVar()
    carregar_imagens()
    criar_canvas()
    date_entry_inicio = criar_input_data(153.0, 44.0)
    date_entry_fim = criar_input_data(615.0, 44.0)
    tabela = criar_tabela()
    criar_botao(
        x=1072.0,
        y=31.0,
        image=imagens["button_1"],
        command=lambda: carregar_dados_tabela(
            date_entry_inicio.get_date(), date_entry_fim.get_date()
        ),
    )
    criar_botao(
        x=1027.0,
        y=182.0,
        image=imagens["button_2"],
        command=lambda: escolher_pasta(local_de_salvamento),
    )
    criar_botao(
        x=1076.0,
        y=642.0,
        image=imagens["button_3"],
        command=lambda: exportar_presencas(
            local_de_salvamento.get(),
            date_entry_inicio.get_date(),
            date_entry_fim.get_date(),
        ),
    )
